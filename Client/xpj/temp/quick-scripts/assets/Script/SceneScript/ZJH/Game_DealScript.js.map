{"version":3,"sources":["Game_DealScript.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\SceneScript\\ZJH","sourcesContent":["const { ccclass, property } = cc._decorator;\r\nimport * as dd from './../../Modules/ModuleManager';\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.SpriteFrame)\r\n    card_sf: cc.SpriteFrame = null;\r\n\r\n    onLoad() {\r\n\r\n    }\r\n\r\n    createNode(pos) {//pos为创建节点坐标\r\n        let node = new cc.Node('card_back');\r\n        let sprite = node.addComponent(cc.Sprite);\r\n        sprite.spriteFrame = this.card_sf;\r\n        node.parent = this.node;\r\n        node.setPosition(pos);\r\n        node.scale = 0;\r\n        return node;\r\n    }\r\n    /**\r\n     * 间隔调用动画\r\n     * @param {cc.Vec2[]} posList 终点坐标点列表\r\n     * @param {any} cb            每次动作结束的回调\r\n     * @param {number} [repeat=1]  重复次数\r\n     * @param {number} [interval=0.4] 以秒为单位的时间间隔\r\n     * @param {number} [delay=0] 开始延时\r\n     * @memberof NewClass\r\n     */\r\n    showDeal(posList: cc.Vec2[], cb, repeat: number = 1, interval: number = 0.4, delay: number = 0) {\r\n        // 重复次数\r\n        repeat = posList.length * repeat - 1;\r\n        let i = 0;\r\n        this.schedule(() => {\r\n            let index = i % posList.length;\r\n            if (cb) {\r\n                let data = null;\r\n                cb(index);\r\n            }\r\n            i++;\r\n        }, interval, repeat, delay);\r\n    }\r\n\r\n    /**\r\n     * 发牌动画\r\n     * \r\n     * @param {cc.Vec2} startP 起始的坐标点\r\n     * @param {cc.Vec2[]} posList 终点坐标点列表\r\n     * @param {any} eachCB 每一个动作结束的回调\r\n     * @param {any} endCB  所有动作结束的回调\r\n     * @param {number} [repeat=1] 重复次数\r\n     * @param {number} [interval=0.2] 以秒为单位的时间间隔\r\n     * @param {number} [delay=0] 开始延时\r\n     * @memberof NewClass\r\n     */\r\n    showDealFP(startP: cc.Vec2, posList: cc.Vec2[], eachCB, endCB, repeat: number = 1, interval: number = 0.2, delay: number = 0) {\r\n        if (posList === null || posList === undefined) return;\r\n        //计算一轮的长度\r\n        let rCount = posList.length;\r\n        //计算需要重复多少次(循环是从0开始，所以要减1)\r\n        repeat = posList.length * repeat - 1;\r\n        let count = 0;\r\n        this.schedule(() => {\r\n            if (dd.mp_manager)\r\n                dd.mp_manager.playFaPai();\r\n            let cNode = this.createNode(startP);\r\n            //计算第几个位置\r\n            let index = count % posList.length;\r\n            if (posList[index]) {\r\n                let finished = cc.callFunc((target, opt) => {\r\n                    if (eachCB) {\r\n                        //计算第几轮\r\n                        let round = Math.floor(opt.count / rCount);\r\n                        eachCB(opt.index, round);\r\n                    }\r\n                    if (opt.count === repeat) {//动画执行完毕\r\n                        if (endCB) {\r\n                            endCB();\r\n                        }\r\n                    }\r\n                    cNode.destroy();\r\n                }, this, { 'index': index, \"count\": count });\r\n                cNode.opacity = 100;\r\n                let spawn = cc.spawn(cc.scaleTo(0.5, 0.8, 0.8), cc.rotateBy(0.5, 540), cc.moveTo(0.5, posList[index]), cc.fadeIn(0.5));\r\n                let myAction = cc.sequence(spawn, finished);\r\n                cNode.runAction(myAction);\r\n                count++;\r\n            }\r\n        }, interval, repeat, delay);\r\n    }\r\n\r\n    /**\r\n     * 弃牌动作\r\n     * @param {cc.Vec2} startP 起始坐标\r\n     * @param {any} endCB  结束回调\r\n     * @param {cc.Vec2} endP   终点坐标\r\n     */\r\n    showDealDiscard(startP: cc.Vec2, endCB?: any, endP: cc.Vec2 = cc.v2(0, 0)) {//弃牌动画\r\n        dd.mp_manager.playFaPai();\r\n        let cNode = this.createNode(startP);\r\n        cNode.scale = 0.8;\r\n        let finished = cc.callFunc(() => {\r\n            if (endCB) {\r\n                endCB();\r\n            }\r\n            //动画执行完毕，显示遮罩\r\n            cNode.destroy();\r\n        }, this);\r\n        let spawn = cc.spawn(cc.scaleTo(0.5, 0), cc.rotateBy(0.5, 540), cc.moveTo(0.5, endP));\r\n        let myAction = cc.sequence(spawn, finished);\r\n        cNode.runAction(myAction);\r\n    }\r\n}\r\n"]}