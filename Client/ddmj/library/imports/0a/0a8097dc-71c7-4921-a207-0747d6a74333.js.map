{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Modules/assets\\Script\\Modules\\IMGManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Modules","sourcesContent":["import ENCManager from './ENCManager';\r\n/**\r\n * 图片动态加载管理类\r\n * \r\n * @export\r\n * @class IMGManager\r\n */\r\nexport default class IMGManager {\r\n    private static _instance: IMGManager = null;\r\n    private constructor() { }\r\n    /**\r\n     * 获取IMGManager单例对象\r\n     * \r\n     * @static\r\n     * @returns {IMGManager} \r\n     * @memberof IMGManager\r\n     */\r\n    static getInstance(): IMGManager {\r\n        if (IMGManager._instance === null) {\r\n            IMGManager._instance = new IMGManager();\r\n        }\r\n        return IMGManager._instance;\r\n    }\r\n\r\n    /**\r\n     * 系统头像\r\n     * \r\n     * @private\r\n     * @type {cc.SpriteFrame}\r\n     * @memberof IMGManager\r\n     */\r\n    private headSpriteFrame: cc.SpriteFrame = null;\r\n\r\n    /**\r\n     * 存放加载过的纹理\r\n     * \r\n     * @private\r\n     * @type {cc.SpriteFrame[]}\r\n     * @memberof IMGManager\r\n     */\r\n    private spriteFrames: cc.SpriteFrame[] = [];\r\n\r\n    /**\r\n     * 聊天图片数组\r\n     * \r\n     * @type {cc.SpriteFrame[]}\r\n     * @memberof IMGManager\r\n     */\r\n    chatSpriteFrames: cc.SpriteFrame[] = [];\r\n    /** \r\n     * 把加载成功的纹理存放到数组，待释放的时候使用\r\n     * \r\n     * @param {cc.SpriteFrame} spriteFrame  添加纹理\r\n     * @memberof IMGManager\r\n     */\r\n    private addSpriteFrame(spriteFrame: cc.SpriteFrame): void {\r\n        let bool: boolean = this.spriteFrames.some((sf) => {\r\n            return sf === spriteFrame;\r\n        });\r\n        if (!bool) this.spriteFrames.push(spriteFrame);\r\n    }\r\n\r\n    /**\r\n     * 初始化，动态加载系统头像\r\n     * \r\n     * @returns {Promise<void>} \r\n     * @memberof IMGManager\r\n     */\r\n    initSystemHead(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            cc.loader.loadRes(\"Texture/SystemHead/1\", cc.SpriteFrame, (err, spriteFrame) => {\r\n                if (err) {\r\n                    reject(err.message);\r\n                }\r\n                else {\r\n                    this.headSpriteFrame = spriteFrame;\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 动态加载聊天图片\r\n     * \r\n     * @memberof IMGManager\r\n     */\r\n    initChat(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            cc.loader.loadRes(\"Texture/Chat/Chat\", cc.SpriteAtlas, (err, atlas: cc.SpriteAtlas) => {\r\n                if (err) {\r\n                    reject(err.message);\r\n                }\r\n                else {\r\n                    for (let i = 1; i <= 55; i++) {\r\n                        let frame = atlas.getSpriteFrame(\"biaoqing_\" + i);\r\n                        if (frame) this.chatSpriteFrames.push(frame);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取图片目录\r\n     * \r\n     * @returns {string} \r\n     * @memberof IMGManager\r\n     */\r\n    private getDirPath(): string {\r\n        //图片保存目录\r\n        let dirpath = jsb.fileUtils.getWritablePath() + 'img/';\r\n        //验证路径是否存在，如果不存在则创建路径\r\n        if (!jsb.fileUtils.isDirectoryExist(dirpath)) {\r\n            jsb.fileUtils.createDirectory(dirpath);\r\n        }\r\n        return dirpath;\r\n    }\r\n\r\n    /**\r\n     * 根据url地址获取本地路径\r\n     * \r\n     * @param {string} url \r\n     * @returns {string} \r\n     * @memberof IMGManager\r\n     */\r\n    private getFilePath(url: string): string {\r\n        return this.getDirPath() + ENCManager.getInstance().MD5(url) + '.jpg';\r\n    }\r\n\r\n    /**\r\n     * 根据路径加载本地存储的图片\r\n     * \r\n     * @param {string} filePath 图片路径\r\n     * @returns {Promise<cc.SpriteFrame>} \r\n     * @memberof IMGManager\r\n     */\r\n    private loadLocalImg(filePath: string): Promise<cc.SpriteFrame> {\r\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\r\n            cc.loader.load(filePath, (err, tex) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    let spriteFrame = new cc.SpriteFrame(tex);\r\n                    this.addSpriteFrame(spriteFrame);\r\n                    resolve(spriteFrame);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 根据url加载图片，长度为0取系统头像，大于0取微信头像\r\n     * \r\n     * @param {string} url 头像地址\r\n     * @returns {Promise<cc.SpriteFrame>} \r\n     * @memberof IMGManager\r\n     */\r\n    async loadURLImage(url: string): Promise<cc.SpriteFrame> {\r\n        if (url.length > 0) {//取微信头像\r\n            if (cc.sys.isNative) {\r\n                let filePath = this.getFilePath(url);\r\n                if (jsb.fileUtils.isFileExist(filePath)) {\r\n                    return this.loadLocalImg(filePath);\r\n                } else {\r\n                    let buffer = await new Promise<ArrayBuffer>((resolve, reject) => {\r\n                        var xhr = new XMLHttpRequest()\r\n                        xhr.responseType = 'arraybuffer';\r\n                        xhr.timeout = 10000;\r\n                        xhr.onload = () => {\r\n                            if (xhr.status === 200) {\r\n                                resolve(xhr.response);\r\n                            } else {\r\n                                reject(new TypeError('Network response failed'));\r\n                            }\r\n                        }\r\n                        xhr.onerror = () => {\r\n                            reject(new TypeError('Network request error'));\r\n                        }\r\n                        xhr.ontimeout = () => {\r\n                            reject(new TypeError('Network request timeout'));\r\n                        }\r\n                        xhr.open(\"GET\", url, true);\r\n                        xhr.send();\r\n                    });\r\n                    jsb.fileUtils.writeDataToFile(new Uint8Array(buffer), filePath);\r\n                    return this.loadLocalImg(filePath);\r\n                }\r\n            } else {\r\n                return new Promise<cc.SpriteFrame>((resolve, reject) => {\r\n                    cc.loader.load({ url: url, type: 'jpg' }, (err, tex) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            let spriteFrame = new cc.SpriteFrame(tex);\r\n                            this.addSpriteFrame(spriteFrame);\r\n                            resolve(spriteFrame);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        } else {//取系统头像\r\n            return this.headSpriteFrame;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放图片管理器的资源\r\n     * \r\n     * @memberof IMGManager\r\n     */\r\n    destroySelf(): void {\r\n        this.spriteFrames.forEach((spriteFrame) => {\r\n            this.release(spriteFrame);\r\n        });\r\n        this.spriteFrames.length = 0;\r\n        this.release(this.headSpriteFrame);\r\n\r\n        IMGManager._instance = null;\r\n    }\r\n\r\n    /**\r\n     * 释放资源及其所有的引用\r\n     * \r\n     * @private\r\n     * @param {(cc.Asset | cc.RawAsset | string)} owner 需要释放的资源\r\n     * @memberof IMGManager\r\n     */\r\n    private release(owner: cc.Asset | cc.RawAsset | string): void {\r\n        let deps = cc.loader.getDependsRecursively(owner);\r\n        cc.loader.release(deps);\r\n    }\r\n}\r\n    //http://wx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/0"]}